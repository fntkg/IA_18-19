package aima.gui.demo.search;

import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import aima.core.agent.Action;
import aima.core.environment.eightpuzzle.EightPuzzleBoard;
import aima.core.environment.eightpuzzle.EightPuzzleFunctionFactory;
import aima.core.environment.eightpuzzle.EightPuzzleGoalTest;
import aima.core.search.framework.Problem;
import aima.core.search.framework.ResultFunction;
import aima.core.search.framework.Search;
import aima.core.search.framework.SearchAgent;
import aima.core.search.uninformed.DepthLimitedSearch;
import aima.core.search.uninformed.IterativeDeepeningSearch;
import aima.core.search.framework.TreeSearch;
import aima.core.search.uninformed.IterativeDeepeningSearch;
import aima.core.search.framework.GraphSearch;

import aima.core.search.uninformed.UniformCostSearch;
import aima.core.search.uninformed.BreadthFirstSearch;
import aima.core.search.uninformed.DepthFirstSearch;

/**
 * @author Ravi Mohan
 * 
 */

public class EightPuzzleDemo {
	static EightPuzzleBoard boardWithThreeMoveSolution = new EightPuzzleBoard(
			new int[] { 1, 2, 5, 3, 4, 0, 6, 7, 8 });;

	static EightPuzzleBoard random1 = new EightPuzzleBoard(new int[] { 1, 4, 2,
			7, 5, 8, 3, 0, 6 });

	static EightPuzzleBoard extreme = new EightPuzzleBoard(new int[] { 0, 8, 7,
			6, 5, 4, 3, 2, 1 });


	public static void main(String[] args) {
		eightPuzzleDLSDemo();
		//eightPuzzleIDLSDemo();
		//eightPuzzleUCSDemo();
		//eightPuzzleBFSDemo();
		//eightPuzzleDFSDemo();
		//eightPuzzleIDSDemo();
	}

	private static void eightPuzzleDLSDemo() {
		System.out.println("\nEightPuzzleDemo recursive DLS (9) -->");
		try {
			long TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
			TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
			Problem problem = new Problem(extreme, EightPuzzleFunctionFactory
					.getActionsFunction(), EightPuzzleFunctionFactory
					.getResultFunction(), new EightPuzzleGoalTest());
			Search search = new DepthLimitedSearch(3);
			SearchAgent agent = new SearchAgent(problem, search);
			executeActions(agent.getActions(), problem);
			printInstrumentation(agent.getInstrumentation());
			TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
			tiempo = TFin - TInicio; //Calculamos los milisegundos de diferencia
			eightPuzzleSearch(agent, "DLS-3-30", tiempo);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static void eightPuzzleIDLSDemo() {
		System.out.println("\nEightPuzzleDemo Iterative DLS -->");
		try {
			long TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
			TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
			Problem problem = new Problem(extreme, EightPuzzleFunctionFactory
					.getActionsFunction(), EightPuzzleFunctionFactory
					.getResultFunction(), new EightPuzzleGoalTest());
			Search search = new IterativeDeepeningSearch();
			SearchAgent agent = new SearchAgent(problem, search);
			executeActions(agent.getActions(), problem);
			printInstrumentation(agent.getInstrumentation());
			TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
			tiempo = TFin - TInicio; //Calculamos los milisegundos de diferencia
			eightPuzzleSearch(agent, "DLS itr", tiempo);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private static void eightPuzzleUCSDemo() {
		System.out.println("\nEightPuzzleDemo UniformCostSearch UCS -->");
		try {
			long TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
			TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
			Problem problem = new Problem(extreme, EightPuzzleFunctionFactory
					.getActionsFunction(), EightPuzzleFunctionFactory
					.getResultFunction(), new EightPuzzleGoalTest());
			Search search = new UniformCostSearch();
			SearchAgent agent = new SearchAgent(problem, search);
			executeActions(agent.getActions(), problem);
			printInstrumentation(agent.getInstrumentation());
			TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
			tiempo = TFin - TInicio; //Calculamos los milisegundos de diferencia
			eightPuzzleSearch(agent, "UCS-T-9", tiempo);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private static void eightPuzzleBFSDemo() {
		System.out.println("\nEightPuzzleDemo BreadthFirstSearch BFS -->");
		try {
			long TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
			TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
			Problem problem = new Problem(extreme, EightPuzzleFunctionFactory
					.getActionsFunction(), EightPuzzleFunctionFactory
					.getResultFunction(), new EightPuzzleGoalTest());
			Search search = new BreadthFirstSearch();
			SearchAgent agent = new SearchAgent(problem, search);
			executeActions(agent.getActions(), problem);
			printInstrumentation(agent.getInstrumentation());
			TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
			tiempo = TFin - TInicio; //Calculamos los milisegundos de diferencia
			eightPuzzleSearch(agent, "BFS-T-30", tiempo);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private static void eightPuzzleDFSDemo() {
		System.out.println("\nEightPuzzleDemo DepthFirstSearch DFS -->");
		try {
			long TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
			TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
			Problem problem = new Problem(extreme, EightPuzzleFunctionFactory
					.getActionsFunction(), EightPuzzleFunctionFactory
					.getResultFunction(), new EightPuzzleGoalTest());
			Search search = new DepthFirstSearch(new TreeSearch());
			SearchAgent agent = new SearchAgent(problem, search);
			executeActions(agent.getActions(), problem);
			printInstrumentation(agent.getInstrumentation());
			TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
			tiempo = TFin - TInicio; //Calculamos los milisegundos de diferencia
			eightPuzzleSearch(agent, "DFS-T-30", tiempo);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private static void eightPuzzleIDSDemo() {
		System.out.println("\nEightPuzzleDemo DepthFirstSearch DFS -->");
		try {
			long TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
			TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
			Problem problem = new Problem(extreme, EightPuzzleFunctionFactory
					.getActionsFunction(), EightPuzzleFunctionFactory
					.getResultFunction(), new EightPuzzleGoalTest());
			Search search = new IterativeDeepeningSearch();
			SearchAgent agent = new SearchAgent(problem, search);
			executeActions(agent.getActions(), problem);
			printInstrumentation(agent.getInstrumentation());
			TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
			tiempo = TFin - TInicio; //Calculamos los milisegundos de diferencia
			eightPuzzleSearch(agent, "IDS-9", tiempo);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	//========================
	//PRIVATE METHODS
	//========================
	private static void eightPuzzleSearch(SearchAgent agent, String busqueda, long tiempo) {
		String pathcostM =agent.getInstrumentation().getProperty("pathCost");
		int depth;
		if (pathcostM!=null) depth = (int)Float.parseFloat(pathcostM);
		else depth = 0;
		int expandedNodes;
		if (agent.getInstrumentation().getProperty("nodesExpanded")==null) expandedNodes= 0;
		else expandedNodes =
		(int)Float.parseFloat(agent.getInstrumentation().getProperty("nodesExpanded"));
		int queueSize;
		if (agent.getInstrumentation().getProperty("queueSize")==null) queueSize=0;
		else queueSize = (int)Float.parseFloat(agent.getInstrumentation().getProperty("queueSize"));
		int maxQueueSize;
		if (agent.getInstrumentation().getProperty("maxQueueSize")==null) maxQueueSize= 0;
		else maxQueueSize =
		(int)Float.parseFloat(agent.getInstrumentation().getProperty("maxQueueSize"));
		System.out.println(busqueda + "|		" + depth + "|		" + expandedNodes + "|		" + queueSize + "|		" + maxQueueSize +"|		"+ tiempo);
	}


	private static void printInstrumentation(Properties properties) {
		Iterator<Object> keys = properties.keySet().iterator();
		while (keys.hasNext()) {
			String key = (String) keys.next();
			String property = properties.getProperty(key);
			System.out.println(key + " : " + property);
		}

	}
	
	public static void executeActions(List<Action> actions, Problem problem) {
		Object initialState = problem.getInitialState();
		ResultFunction resultFunction = problem.getResultFunction();
		Object state = initialState;
		System.out.println("INITIAL STATE");
		System.out.println(state);
		for (Action action : actions) {
		 System.out.println(action.toString());
		 state = resultFunction.result(state, action);
		 System.out.println(state);
		 System.out.println("- - -");
		}
		}

}